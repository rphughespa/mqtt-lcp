#!/usr/bin/python3
# main.py
"""

main.py - Main module for mqtt-dispatcher, launches and monitors process for mqtt-dispatcher

The MIT License (MIT)


Copyright 2021 richard p hughes

Permission is hereby granted, free of charge, to any person obtaining a copy of this software
and associated documentation files (the "Software"), to deal in the Software without restriction,
including without limitation the rights to use, copy, modify, merge, publish, distribute,
sublicense, and/or sell copies of the Software, and to permit persons to whom the Software
is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies
or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OFSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

"""

import sys

sys.path.append('../lib')

import time
import traceback

from multiprocessing import Queue

from processes.process_utils import ProcessSupervisor
from processes.log_process import LogProcess
from processes.mqtt_process import MqttProcess
from processes.serial_process import SerialProcess

from utils.global_constants import Global


from cab_process import CabProcess
from switch_process import SwitchProcess
from roster_process import RosterProcess
from app_process import AppProcess

from dccpp_driver import DccppDriver
from withrottle_driver import WithrottleDriver
from withrottle_client_socket import WithrottleClientSocket

WITHROTTLE1 = "withrottle1"

class Supervisor(ProcessSupervisor):
    """ launch and supervise proceses """
    def __init__(self):
        super().__init__()
        self.queues = {}
        self.queues.update({Global.LOGGER: Queue()})
        self.queues.update({Global.MQTT: Queue()})
        self.queues.update({Global.DEVICE: Queue()})
        self.queues.update({Global.DRIVER: Queue()})
        self.queues.update({Global.WITHROTTLE1: Queue()})
        self.queues.update({Global.WITHROTTLE2: Queue()})
        self.queues.update({Global.WITHROTTLE3: Queue()})
        self.queues.update({Global.WITHROTTLE4: Queue()})
        self.queues.update(
            {Global.APPLICATION + ":" + Global.RESPONSE: Queue()})
        self.queues.update({Global.CAB + ":" + Global.RESPONSE: Queue()})
        self.queues.update({Global.SWITCH + ":" + Global.RESPONSE: Queue()})
        self.queues.update({Global.ROSTER + ":" + Global.RESPONSE: Queue()})
        self.queues.update({Global.DRIVER + ":" + Global.RESPONSE: Queue()})
        self.queues.update({Global.APPLICATION: Queue()})
        self.queues.update({Global.CAB: Queue()})
        self.queues.update({Global.SWITCH: Queue()})
        self.queues.update({Global.ROSTER: Queue()})
        self.mode = "dcc++"

    def start_log_process(self):
        """ start log process """
        print("supervisor: ... launching ... log process")
        process_pid = LogProcess(events=self.events, queues=self.queues)
        process_pid.start()
        print("supervisor: ... log ... launched")
        self.processes.update(
            {Global.LOGGER: (self.start_log_process, process_pid)})

    def start_mqtt_process(self):
        """ start mqtt process """
        print("supervisor: ... launching ... mqtt process")
        process_pid = MqttProcess(events=self.events, queues=self.queues)
        process_pid.start()
        print("supervisor: ... mqtt ... launched")
        self.processes.update(
            {Global.MQTT: (self.start_mqtt_process, process_pid)})

    def start_serial_process(self):
        """ start serial process """
        print("supervisor: ... launching ... serial process")
        process_pid = SerialProcess(events=self.events, queues=self.queues)
        process_pid.start()
        print("supervisor: ... serial ... launched")
        self.processes.update(
            {Global.SERIAL: (self.start_serial_process, process_pid)})

    def start_dccpp_driver(self):
        """ start  dccpp driver process"""
        print("supervisor: ... launching ... dcc++ driver process")
        process_pid = DccppDriver(events=self.events,
                                         queues=self.queues)
        process_pid.start()
        print("supervisor: ... .dcc++ .. launched")
        self.processes.update(
            {Global.DRIVER: (self.start_dccpp_driver, process_pid)})

    def start_withrottle_1_process(self):
        """ start withrottle 1 process """
        print("supervisor: ... launching ... withrottle 1 process")
        local_queues = {}
        for queue_name, queue in self.queues.items():
            local_queues[queue_name] = queue
        local_queues[Global.DEVICE] = self.queues[Global.WITHROTTLE1]
        process_pid = WithrottleClientSocket(identity=Global.WITHROTTLE1, \
                events=self.events, queues=local_queues)
        process_pid.start()
        print("supervisor: ... withrottle 1  ... launched")
        self.processes.update(
            {Global.WITHROTTLE1: (self.start_withrottle_1_process, process_pid)})

    def start_withrottle_2_process(self):
        """ start withrottle 2 process """
        print("supervisor: ... launching ... withrottle 1 process")
        local_queues = {}
        for queue_name, queue in self.queues.items():
            local_queues[queue_name] = queue
        local_queues[Global.DEVICE] = self.queues[Global.WITHROTTLE2]
        process_pid = WithrottleClientSocket(identity=Global.WITHROTTLE2, \
                events=self.events, queues=local_queues)
        process_pid.start()
        print("supervisor: ... withrottle 2  ... launched")
        self.processes.update(
            {Global.WITHROTTLE2: (self.start_withrottle_2_process, process_pid)})

    def start_withrottle_3_process(self):
        """ start withrottle 3 process """
        print("supervisor: ... launching ... withrottle 1 process")
        local_queues = {}
        for queue_name, queue in self.queues.items():
            local_queues[queue_name] = queue
        local_queues[Global.DEVICE] = self.queues[Global.WITHROTTLE3]
        process_pid = WithrottleClientSocket(identity=Global.WITHROTTLE3, \
                events=self.events, queues=local_queues)
        process_pid.start()
        print("supervisor: ... withrottle 3  ... launched")
        self.processes.update(
            {Global.WITHROTTLE3: (self.start_withrottle_3_process, process_pid)})

    def start_withrottle_4_process(self):
        """ start withrottle 4 process """
        print("supervisor: ... launching ... withrottle 4 process")
        local_queues = {}
        for queue_name, queue in self.queues.items():
            local_queues[queue_name] = queue
        local_queues[Global.DEVICE] = self.queues[Global.WITHROTTLE4]
        process_pid = WithrottleClientSocket(identity=Global.WITHROTTLE4, \
                events=self.events, queues=local_queues)
        process_pid.start()
        print("supervisor: ... withrottle 4  ... launched")
        self.processes.update(
            {Global.WITHROTTLE4: (self.start_withrottle_4_process, process_pid)})

    def start_withrottle_driver(self):
        """ start  withrottle driver process"""
        print("supervisor: ... launching ... Withrottle Driver process")
        process_pid = WithrottleDriver(events=self.events,
                                         queues=self.queues)
        process_pid.start()
        print("supervisor: ... .Withrottle Driver .. launched")
        self.processes.update(
            {Global.DRIVER: (self.start_withrottle_driver, process_pid)})


    def start_cab_process(self):
        """ start cab process"""
        print("supervisor: ... launching ... cab process")
        process_pid = CabProcess(events=self.events, queues=self.queues)
        process_pid.start()
        print("supervisor: ... cab ... launched")
        self.processes.update(
            {Global.CAB: (self.start_cab_process, process_pid)})

    def start_switch_process(self):
        """ start switch process"""
        print("supervisor: ... launching ... switch process")
        process_pid = SwitchProcess(events=self.events, queues=self.queues)
        process_pid.start()
        print("supervisor: ... switch ... launched")
        self.processes.update(
            {Global.SWITCH: (self.start_switch_process, process_pid)})

    def start_roster_process(self):
        """ start roster process"""
        print("supervisor: ... launching ... roster process")
        process_pid = RosterProcess(events=self.events, queues=self.queues)
        process_pid.start()
        print("supervisor: ... roster ... launched")
        self.processes.update(
            {Global.ROSTER: (self.start_roster_process, process_pid)})

    def start_app_process(self):
        """ start app process """
        print("supervisor: ... launching ... app process")
        process_pid = AppProcess(events=self.events, queues=self.queues)
        process_pid.start()
        print("supervisor: ... app ... launched")
        self.processes.update(
            {Global.APPLICATION: (self.start_app_process, process_pid)})

    def start_all_processes(self):
        """ start all the processes """
        print("supervisor: launches worker processes")
        self.start_log_process()
        self.start_mqtt_process()
        if self.mode == "dcc++":
            self.start_serial_process()
            self.start_dccpp_driver()
        elif self.mode == "withrottle":
            self.start_withrottle_1_process()
            self.start_withrottle_2_process()
            self.start_withrottle_3_process()
            self.start_withrottle_4_process()
            self.start_withrottle_driver()
        # allow time for IO processes to startup
        time.sleep(2)
        self.start_cab_process()
        self.start_roster_process()
        self.start_switch_process()
        self.start_app_process()
        time.sleep(2)

    def parse_config(self):
        """ parse config, get mode """
        self.mode = None
        if Global.OPTIONS in self.config[Global.CONFIG]:
            if Global.MODE in self.config[Global.CONFIG][Global.OPTIONS]:
                self.mode = \
                    self.config[Global.CONFIG][Global.OPTIONS][Global.MODE]



if __name__ == "__main__":
    supervisor = Supervisor()
    supervisor.parse_config()
    #  program normmally start at boot, wait for other services to sta
    supervisor.perform_wait_countdown(7)

    print("Emulation mode: " + str(supervisor.mode))
    while not supervisor.shutdown_event.is_set():
        try:
            supervisor.start_all_processes()
            supervisor.monitor_all_processes()
        except Exception as exc:
            print("Exception Occurred: " + str(exc))
            traceback.print_exc()
            supervisor.shutdown_event.set()
        finally:
            supervisor.shutdown_all_processes()

    print(" ... Exiting.")
    sys.exit(0)
