Setup RASPBERRY PI 4 desktop for mqtt-lcp.  



These instructions cover setting up a PI 4 computer to run mqtt_lcp applications.  
specifically installing a desktop (version of the 64 bit Raspberry OS Bullseye release.
A monitor and keyboard are needed for these instructions.  
After the remote desktop service is install, the monitor and keyboard are
no longer needed.

These instructions are a bit complicated, but you only need to do them once.  
After you have a working system you can then clone the sdcard to setup other computers.


1. Use an imaging tool to write the OS image to an sdcard. 


2.  Boot up the PI.  The first boot may take a while to complete,
    After the PI activity light settles down, try loggin in:

	    sudo rpi-update
	    reboot
	    sudo apt update
	    sudo apt upgrade
	    sudo rpi-eeprom-update -d -a
	    reboot ...
     
        sudo raspi-config
            - change hostname
            - enable i2c interface (if desired)
            - enable serial (if desired)
	        - enable ssh (if desired)
	    - enable x11 (disable WAYLAND)

        - when you finish, the pi will reboot   

2.1. Create Virtual ENV for python (optional)
	python -m venv /home/pi/mqtt-lcp-venv

	Edit the BASHRC to activate the venv
		nano .bashrc	
		... add to end of file:	
		source /home/pi/mqtt-lcp-venv/bin/activate

3.  Add remote desktop
    
    !!! For initial Bulleseye release, see note at end of this document
    sudo apt install xrdp

	Note: On Bookworm, cretain apps like Chromium will not display properly
	when run remotely.  Adding "--disable-gpu" helps.

    # sudo gpasswd -d pi render
    # sudo gpasswd -d pi video

      

4.  Install zram swapping

	sudo apt update && sudo apt upgrade -y

	# turn off normal disk swapping
	sudo /etc/init.d/dphys-swapfile stop
	sudo apt-get remove --purge dphys-swapfile

	# install zram
	sudo apt install git
	cd Downloads
	git clone https://github.com/foundObjects/zram-swap
	cd zram-swap
	sudo ./install.sh
	... reboot

	# check that zram swapping is installed
	sudo cat /proc/swaps
	... you shoud see an entry like:
		/dev/zram0  ...
		

5.  Add a second suser in case the pi account gets corrupted:
		sudo adduser {..new user..}
		sudo adduser {..new user..} sudo




6. If desired, give the computer a static IP, varies by OS version:


	sudo nano /etc/dhcpcd.conf
	--- near the bottom of the file, uncomment out three sample lines
		 for static IP, gateway, and DNS.
	Save the file and reboot.


	After reboot, open command line terminal and check IP address
		ifconfig
		ping another computer on your network
		log into another computer and ping the computer you are
		configurating:  ping "hostname".local)

7.  If you enable two interfaces on a PI, wired and WiFi, inform the
	mDNS daemon, Avahi, which interface it should use to publish your host name:

	sudo nano /etc/avahi/avahi-daemon.conf
		... uncomment the "allow-interfaces" line
		... set the interface to your ptimary one, use etho for the wired port.

8. If setting up PI 4 with Raspbian and want to use wired ethernet as primary and WIFI as backup:

	sudo apt-get install ethtool
	sudo nano /etc/rc.local
		...  at the end of the file, before the exit(), insert
		...  this code to check to see if ethernet is present and if so disables wifi
		...	 if no wired etherener, use wifi

		# Disable WiFi if wired.
		printf "Checking Network interfaces...\n"
		if ethtool eth0 | egrep "Link.*yes" && ifconfig eth0 | grep "inet"; then
	  		logger 'Disabling WiFi...'
	  	ifconfig wlan0 down
		else
	  		printf "WiFi is still enabled: Ethernet is down or ethtool is not installed.\n"
		fi


9. mqtt_lcp needs a MQTT message broker.  You only need one on your network.
	If this computer is to be your broker:
		sudo apt install mosquitto
		sudo reboot

	After rebooting, create  user password file for mqtt.
	I use user: trains, password: choochoo
		cd /etc/mosquitto
		sudo mosquitto_passwd -c passwordfile trains
	When promted, enter password, choochoo
	cd /etc/mosquitto/conf.d
	sudo nano mqtt.conf
	add these lines, save and exit
		allow_anonymous false
		password_file /etc/mosquitto/passwordfile
	cd /etc/mosquitto
	sudo nano mosquitto.conf
	add this line:
		listener 1883 0.0.0.0
		
	reboot ...


10. On all computer you plan on running mqtt_lcp you can optionally install the mosquitto-clients; mosquitto_pub, and
 	mosquitto_sub:

	sudo apt install mosquitto-clients


11. Now you can test the broker using the client tools.
	Open a terminal window and type:

		mosquitto_sub -h your-broker-computer.local -t trains/# -u user-you-created -P user-password

	... Note, the "P" must be capitalized

	Open another terminal window on this computer or another:


		mosquitto_pub -h your-broker-computer.local -t trains/hello -u user-you-created -P user-password -m "Hello"

	The message "Hello" should appear on the mosquitto_sub window.

11.5 If installing on Raspberry Os Bullseye lite 32bit (Pi Zero?)

	sudo apt install libopenjp2-7
	
11.6 Add .local/bin to path
    
    nano .bashrc
    add to end of file
        export PATH=$PATH:/home/pi/.local/bin
    exit and save
    
12. Now install python libraries:

	Note: In the Bookworm release of Raspberry OS, using "sudo sudo pip3" 
	    	no longer works. The default in Bookworm is to use virtual environmenst for Python.
		If you have elected to not use virtual envisonments, excuting the following 
		will reenable the old functionality:

		sudo mv /usr/lib/python3.11/EXTERNALLY-MANAGED /usr/lib/python3.11/xxx-EXTERNALLY-MANAGED	

	sudo apt install python3-pip -y
	sudo pip3 install paho-mqtt
	sudo pip3 install pyyaml
	sudo pip3 install colorlog
	sudo pip3 install dumper
	sudo pip3 install pillow
	sudo pip3 install pyserial
	sudo pip3 install zeroconf
	sudo pip3 install pyusb
	sudo pip3 install smbus2
	sudo pip3 install smbus
	sudo pip3 install requests
	sudo apt-get install python3-pil.imagetk -y

	
    	# sudo apt install python3-lgpio -y
    	sudo pip3 install ipykernel

12.1 if running any mqtt-lcp TK gui apps on this computer:

	sudo apt install python3-tk	-y
	sudo pip3 install ttkbootstrap
	
12.2 If running PyQT5 Apps:

	sudo apt install python3-pyqt5

	If doing development:
       		sudo apt-get install qt5-default
       		sudo apt-get install qtcreator

12.3  If Java is needed:
	sudo apt install openjdk-11-jre -y
	# for Bookworm: sudo apt install openjdk-17-jdk

12.4 if Elixir is needed:
	sudo apt install elixir -y
	sudo apt install erlang-dev -y

13. For user serial access

    sudo usermod -a -G dialout pi
    sudo usermod -aG video pi



14. For I2C:

	Enable I2C in raspi-config
	sudo nano /boot/firmware/config.txt 
		add/change these lines, save and exit
		dtparam=i2c_arm=on,i2c_arm_baudrate=100000
		# use 50000 for pi zero
		# core_freq=250
	reboot
	sudo apt install i2c-tools
	i2cdetect -y 1         --- Note: could be 1 or 0
		--- should run without errorsi2cde

15.  Install handy app that displays info about your computer:

	cd Downloads
	git clone https://github.com/jnweiger/landscape-sysinfo-mini.git
	cd landscape-sysinfo-mini
	edit landscape-sysinfo.py
		a. change line 1 from python to python3
		b. remove import of utmp
		c. remove utmp_count function
		d. remove "users=..." line
		e. remove print line with "Usage of /"
		f. change remaining print lines to be print(...)
	execute to command: python3 landscape-sysinfo.py
	chmod a+x landscape-sysinfo.py
	execute the command ./landscape-sysinfo.py
	copy to usr/bin (and drop ".py"):  sudo cp landscape-sysinfo.py /usr/bin/landscape-sysinfo
	cd ~
	execute command: landscape-sysinfo





16. Setup logging for mqtt_lcp apps


    	mkdir /home/pi/mqtt-lcp
	mkdir /home/pi/mqtt-lcp/apps
	sudo mkdir /var/log/mqtt-lcp
	sudo chmod 755 /var/log/mqtt-lcp
	sudo chown pi /var/log/mqtt-lcp
	sudo chgrp pi /var/log/mqtt-lcp
	sudo nano /etc/logrotate.d/mqtt-lcp
	... add  the following, save and exit
		/var/log/mqtt-lcp/*.log {
			rotate 7
			daily
			compress
			size 100k
			nocreate
			missingok
		}

	touch /var/log/mqtt-lcp/test.log
	logrotate -d /etc/logrotate.d/mqtt-lcp

	--  should run without error...


17. If using a software controlled fan install the software:
	Pimoroni Fan Shim:
		cd /home/pi/Downloads
		git clone https://github.com/pimoroni/fanshim-python
		cd fanshim-python
		sudo ./install.sh
		reboot ...
		cd Downloads/fanshim-python/examples
		sudo ./install.sh --on-threshold 65 --off-threshold 55 --delay 2

	Argon One Case:
		cd Downloads
		wget  https://download.argon40.com/argon1.sh
		chmod a+x argon1.sh
		./argon1.sh

18, A few helpful chnages to .bashrc

	nano .bashrc	
	... add to end of file:
	
	alias ls='ls --color=none'
	alias nano='nano -Ynone'
	

	
19. Setup supervisor application, mqtt-supervisor. This program allows a reboot or clean shutdown of the computer:

	mkdir /home/pi/mqtt-lcp/apps
	Using FTP upload/copy the following from your dev / server computer to the new computer:
		mqtt-supervisor-yyyy-mm-dd.tgz to /home/pi/mqtt-lcp/apps

	cd /home/pi/mqtt-lcp/apps
	tar -xzvf mqtt-supervisor-yyyy-mm-dd.tgz
	cd mqtt-supervisor/bin
	edit config.json as needed
	to run the program: ./mqtt-supervisor
	tyep "quit" to end the program

	Setup the shutdown app to start at boot.
		sudo nano /etc/crontab
		Append to end of file, save and exit:
	    @reboot pi sleep 10 && cd /home/pi/mqtt-lcp/apps/mqtt-supervisor/bin && ./mqtt-supervisor &
	    ... or for elixir apps:
	    @reboot pi sleep 10 && cd /home/pi/mqtt-lcp/apps/mqtt_supervisor && ./bin/mqtt_supervisor daemon &

	Reboot

	After computer reboots
	ps aux | grep mqtt
		... you should see an entry for mqtt-supervisor
	Check the log file:
	ls -al /var/log/mqtt-lcp
		... you should see mqtt-supervisor.log
	Test supervisor by doing mqtt_shutdown on another computer. Your new computer will shutdown within a minute.

	Install other background apps in a similar manner.

19.5
	To install an interactive GUI app (mqtt-throttle, mqtt-dispatcher, etc)
	that you want to start after login:
	
	Download and install the app as above until the cron step.
	
	In place of having cron run the app in background we will set the app to launch at login
	
	In the /home/pi/mqtt-lcp/apps folder create a shell sctipt file:
		nano start-mqtt-??.sh : where ??? is the app you want to start
		add one line:
			cd /home/pi/mqtt-lcp/apps/mqtt-???/bin && ./mqtt-???
		chmod a+x start-mqtt-???.sh

	Edit a system config file:
		sudo nano /etc/xdg/autostart/display.desktop
		insert:
			[Desktop Entry]
			Name=Mqtt-Xxxx
			Exec=/bin/bash /home/pi/mqtt-lcp/apps/start-mqtt-???.sh
		save and exit
		reboot



20. At this point I make a backup copy of the new computer sdcard or emmc.
	Instructions avail on web.

	On ubuntu I use:
		sudo dd bs=4M if=/dev/mmcblk0 of=backup_sdcard.img



21. To setup a new computer clone the sdcard backup. I use Etcher or PI Imager.
	
	If you used a static IP address, assign a new one:

	sudo nano /etc/dhcpcd	
	chmod a+x 


	Change computer name:

	
	use raspi-config

22.  To setup photo slideshow:

    sudo apt install xscreensaver
    sudo apt install xscreensaver-data-extra
    sudo apt install xscreensaver-gl
    sudo apt install xscreensaver-gl-extra
    
    ... to setup ...
    
    xscreensaver-demo
    
    ... to change startups ...
    
    sudo  nano /etc/xdg/autostart/mate-screensaver.desktop
        change: "NoDisplay=" from true to false

   Open  Control Center/Startup Applications
   Disable Power Management
   Disable Screensaver
   Create new Startup item for "/usr/bin/xscreensaver"
   
# note on bullseye release


	In the Bullseye release of Raspbian OS the window manager, openbox, was
	replaces by mutter.  This change caused problems the xrdp and desktop paging.
	Fortunately, the old openbox is still included with the release.  When the OS boots,
	it decides with window manager to use based on the memory available.  
	Less than 2gb, use openbox, otherwise use mutter. This memory level is set in a 
	config file.  

	To use the old openbox, simply use easpi-config and enable VNC.  That turns off mutter.

	To elimiate a login issue with xrdp (blank screen):

		sudo nano /etc/X11/xrdp/xorg.conf 
			... find:  Option "DRMDevice" "/dev/dri/renderD128"
			... change it to:
				#Option "DRMDevice" "/dev/dri/renderD128"
				Option "DRMDevice" ""
		save/exit
		Reboot



# notes for vs code for python:
	use this setting to disable sor of imports
	"python.formatting.autopep8Args": ["--ignore","E402"]



